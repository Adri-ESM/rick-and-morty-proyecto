{"ast":null,"code":"//import { ADD_FAVORITES } from \"./actions_types\";\nimport { REMOVE_FAVORITES } from \"./actions_types\";\nexport const addFavorite = character => async dispatch => {\n  try {\n    const response = await fetch('http://localhost:3001/rickandmorty/fav', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(character)\n    });\n    if (response.ok) {\n      const data = await response.json();\n      dispatch({\n        type: ADD_FAVORITES,\n        payload: data.id\n      });\n    } else {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const removeFavorite = id => async dispatch => {\n  try {\n    const response = await fetch(`http://localhost:3001/rickandmorty/fav/${id}`, {\n      method: 'DELETE'\n    });\n    if (response.ok) {\n      const data = await response.json();\n      dispatch({\n        type: REMOVE_FAVORITES,\n        payload: data\n      });\n    } else {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// export const addFavorite = (id) => {\n//     return {\n//         type: 'ADD_FAVORITES',\n//         payload: id,\n//     }\n// }\n\n// export const removeFavorite = (id) => {\n//     return {\n//         type: 'REMOVE_FAVORITES',\n//         payload: id,\n//     }\n// }\n\n//   Aquí, estamos actualizando la acción addFavorite para que acepte un \n//   objeto character que contiene los detalles del personaje que deseas \n//   agregar a la lista de favoritos. Luego, estamos utilizando la biblioteca \n//   fetch para enviar una solicitud HTTP POST al endpoint \n//   http://localhost:3001/rickandmorty/fav, incluyendo el objeto character \n//   en el cuerpo de la solicitud en formato JSON.\n\n// Si la solicitud es exitosa, el servidor devolverá un objeto que contiene \n// un id único para el personaje que se ha agregado a la lista de favoritos. \n// Luego, estamos actualizando el estado de la aplicación llamando a la \n// acción ADD_FAVORITES y pasando el id del personaje agregado como carga útil.\n\n// Ten en cuenta que necesitarás actualizar el código de tu componente para \n// pasar el objeto character a la acción addFavorite.","map":{"version":3,"names":["REMOVE_FAVORITES","addFavorite","character","dispatch","response","fetch","method","headers","body","JSON","stringify","ok","data","json","type","ADD_FAVORITES","payload","id","Error","status","error","console","log","removeFavorite"],"sources":["/Users/asanchez/Desktop/desktop/CURSOS/soy-henry/MODULO-2/rick-and-morty-proyecto/front/src/redux/actions.js"],"sourcesContent":["//import { ADD_FAVORITES } from \"./actions_types\";\nimport { REMOVE_FAVORITES } from \"./actions_types\";\n\n\nexport const addFavorite = (character) => async (dispatch) => {\n  try {\n      const response = await fetch('http://localhost:3001/rickandmorty/fav', {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(character)\n      });\n\n      if (response.ok) {\n          const data = await response.json();\n          dispatch({\n              type: ADD_FAVORITES,\n              payload: data.id,\n          });\n      } else {\n          throw new Error(`HTTP error! status: ${response.status}`);\n      }\n  } catch (error) {\n      console.log(error);\n  }\n};\n\n\nexport const removeFavorite = (id) => async (dispatch) => {\n    try {\n      const response = await fetch(`http://localhost:3001/rickandmorty/fav/${id}`, {\n        method: 'DELETE',\n      });\n      \n      if (response.ok){\n      const data = await response.json();\n      dispatch({\n        type: REMOVE_FAVORITES,\n        payload: data,\n      });\n    } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    }catch (error) {\n      console.log(error);\n    }\n  };\n\n  // export const addFavorite = (id) => {\n//     return {\n//         type: 'ADD_FAVORITES',\n//         payload: id,\n//     }\n// }\n\n// export const removeFavorite = (id) => {\n//     return {\n//         type: 'REMOVE_FAVORITES',\n//         payload: id,\n//     }\n// }\n\n//   Aquí, estamos actualizando la acción addFavorite para que acepte un \n//   objeto character que contiene los detalles del personaje que deseas \n//   agregar a la lista de favoritos. Luego, estamos utilizando la biblioteca \n//   fetch para enviar una solicitud HTTP POST al endpoint \n//   http://localhost:3001/rickandmorty/fav, incluyendo el objeto character \n//   en el cuerpo de la solicitud en formato JSON.\n\n// Si la solicitud es exitosa, el servidor devolverá un objeto que contiene \n// un id único para el personaje que se ha agregado a la lista de favoritos. \n// Luego, estamos actualizando el estado de la aplicación llamando a la \n// acción ADD_FAVORITES y pasando el id del personaje agregado como carga útil.\n\n// Ten en cuenta que necesitarás actualizar el código de tu componente para \n// pasar el objeto character a la acción addFavorite."],"mappings":"AAAA;AACA,SAASA,gBAAgB,QAAQ,iBAAiB;AAGlD,OAAO,MAAMC,WAAW,GAAIC,SAAS,IAAK,MAAOC,QAAQ,IAAK;EAC5D,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;MACnEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,SAAS;IAClC,CAAC,CAAC;IAEF,IAAIE,QAAQ,CAACO,EAAE,EAAE;MACb,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;MAClCV,QAAQ,CAAC;QACLW,IAAI,EAAEC,aAAa;QACnBC,OAAO,EAAEJ,IAAI,CAACK;MAClB,CAAC,CAAC;IACN,CAAC,MAAM;MACH,MAAM,IAAIC,KAAK,CAAE,uBAAsBd,QAAQ,CAACe,MAAO,EAAC,CAAC;IAC7D;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACtB;AACF,CAAC;AAGD,OAAO,MAAMG,cAAc,GAAIN,EAAE,IAAK,MAAOd,QAAQ,IAAK;EACtD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,0CAAyCY,EAAG,EAAC,EAAE;MAC3EX,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAIF,QAAQ,CAACO,EAAE,EAAC;MAChB,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE;MAClCV,QAAQ,CAAC;QACPW,IAAI,EAAEd,gBAAgB;QACtBgB,OAAO,EAAEJ;MACX,CAAC,CAAC;IACJ,CAAC,MAAM;MACH,MAAM,IAAIM,KAAK,CAAE,uBAAsBd,QAAQ,CAACe,MAAO,EAAC,CAAC;IAC7D;EACA,CAAC,QAAOC,KAAK,EAAE;IACbC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}